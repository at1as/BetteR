<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>BetteR &mdash; REST API Test Client</title>
  <link rel="shortcut icon" href="favicon.ico">
  <link rel="stylesheet" href="bootstrap.min.css">
  <link rel="stylesheet" href="bootstrap-theme.min.css">
  <link rel="stylesheet" href="main.css">
</head>

<body role="document">

  <!-- TOP NAV BAR -->
  <div class="navbar-collapse" id="header">
    <div class="container">
      <ul class="nav navbar-nav header-ul" style="display:inline-block;">

        <!-- BRANDING -->
        <li style="float:left">
          <h1>BetteR &mdash; REST API Test Client</h1>
        </li>

        <!-- DROPDOWN MENU -->
        <li style="float:right">
            <a class="header-li">
              Settings <span class="caret"></span>
            </a>
          <ul id="dropdown">
            <li onclick="modalToggle('load-dialog-modal')"><a>Configuration</a></li>
            <li onclick="savedRequestList()"><a>Load Request</a></li>
            <li onclick="modalToggle('variables-modal')"><a>Variables</a></li>
            <li onclick="modalToggle('file-upload-modal')"><a>File Upload</a></li>
            <li onclick="modalToggle('logs-modal')"><a>Logs</a></li>
            <li onclick="quit()"><a>Quit</a></li>
          </ul>
        </li>

        <!-- WARNINGS -->
        <li class="header-li" id="warning-header">
          <a id="warning-text" class="header-button caution" style="display:none" tooltip=""></a>
        </li>

      </ul>
    </div>
  </div>


  <!-- PAGE CONTENT -->
  <div class="container">

      <!-- URL -->
      <div>
        <h2><div id="headingReq" onclick="toggleRequestVisibility()">[&ndash;] Request</div></h2>

        <div style="width:100%" class="box" id="path">
          <select id="requestType" class="form-control form-field-small" name="requestType" style="width:100px; display:inline-block; float:left">
            <% @requests.each do |request| %>
            <option value="<%= request %>"><%= request %></option>
            <% end %>
          </select>
          <input type="text" class="form-control form-field-small url-input" value="<%= h(params[:url]) %>" name="url" id="url" placeholder=" URL"/>
          <select id="times" name="times" class="form-control form-field-small" style="width:100px; display:inline-block">
            <% @times.each do |number| %>
            <option value="<%= number %>"><%= number %> <% if number == "1" %>time<% else %>times<% end %></option>
            <% end %>
          </select>
          <button type="button" tabindex="-1" class="close" onclick="clearURL()">
            <span style="line-height:inherit" aria-hidden="true">&times;</span>
            <span class="sr-only">Close</span>
          </button>
        </div>
      </div>


      <!-- AUTH -->
      <div>
        <h2><div id="headingAuth" onclick="toggleAuthVisibility()">[&ndash;] Authentication</div></h2>
        <div class="box" id="auth">
          <div id="authSelect">
            <span id="auth-span">
              <label class="form-label" for="basicAuthSelect">
                <input id="basicAuthSelect" class="no-back-border" type="radio" name="authType" value="basic" onclick="oAuthHideFields()" checked="true" style="width:20px;">Basic
              </label>
              <label class="form-label" for="digestAuthSelect">
                <input id="digestAuthSelect" class="no-back-border" type="radio" name="authType" value="digest" onclick="oAuthHideFields()" style="width:20px;">Digest
              </label>
            </span>
          </div>
          <div id="authFields">
            <input class="form-control auth-input" type="text" value="<%=h(params[:usr])%>" name="usr" id="usr" placeholder=" Username"  />
            <input class="form-control auth-input" type="text" value="<%=h(params[:pwd])%>" name="pwd" id="pwd" placeholder=" Password" />
            <button type="button" tabindex="-1" class="close" onclick="clearAuthCredentials()">
              <span style="line-height:inherit" aria-hidden="true">&times;</span>
              <span class="sr-only">Close</span>
            </button>
          </div>
        </div>
      </div>


      <!-- HEADERS -->
      <div>
        <h2><div id="headingHead" onclick="toggleHeaderVisibility()">[&ndash;] Headers</div></h2>
        <div class="box" id="headers">
          <div id="headerfieldsAll">
            <% @header_hash.each_with_index do |(key, value), index| %>
            <div id="headerfields<%= index %>" style="margin-bottom:2px;" >
              <input type="text" value="<%=key%>" name="key<%=index%>" id="key<%=index%>" placeholder=" Name" class="key form-control head-input" />
              <input type="text" value="<%=value%>" name="value<%=index%>" id="value<%=index%>" placeholder=" Value" class="value form-control head-input" />

              <button id="close<%= index %>" tabindex="-1" type="button" class="close" onclick="removeRow(this)">
                <span style="line-height:inherit" aria-hidden="true">&times;</span>
                <span class="sr-only">Close</span>
              </button>
            </div>
            <% end %>
          </div>
          <div>
            <input class="btn btn-borderless" type="button" value="Add" id="add" onclick="addNewHeader()"/>
          </div>
        </div>
      </div>


      <!-- PAYLOAD -->
      <div>
        <h2><div id="headingData" onclick="toggleDataVisibility()">[&ndash;] Payload</div></h2>
        <div class="box" id="data">
          <textarea class="form-control" value="<%=h(params[:payload])%>" name="payload" id="payload" placeholder=" Payload Data" style="height:<%= @payloadHeight %>"><%=h(params[:payload])%></textarea>
        </div>
      </div>


      <!-- SUBMIT BUTTONS -->
      <div style="margin-top:5px, padding-top: 3px, padding-bottom: 4px">
        <input type="button" value="Send" class="submit width25 btn btn-simple" onclick="sendRequest()" style="margin-bottom:10px;"/>
        <input type="button" value="Save" class="submit width25 btn btn-simple" onclick="modalToggle('save-modal')" style="margin-bottom:10px;"/>
        <input type="button" value="Clear All" class="submit width25 btn btn-simple" onclick="clearAllFields()" style="margin-bottom:10px;"/>
      </div>


      <!-- RESPONSE -->
      <div>
        <h2><div  id="headingResults" style="margin-top:10px" onclick="toggleResultsVisibility()">[&ndash;] Results</div></h2>
        <div class="box" id="results">
          <div id="response-status">
            <b>Return Code:</b> <span id="returnCode"><%= @return_code.to_s %></span>
            <br/>
            <b>Request Time:</b> <span id="requestTime"><%= @return_time.to_s %></span>
          </div>
          <hr class="v-marginless">
          <div style="padding: 0px;">

            <ul id="response-filters">
              <li style="display:inline-block;" id="viewResponseData">
                <a class="btn btn-borderless" onclick="toggleResponseContent(this)" id="response-data-link" style="color:#337ab7">Response Data</a>
              </li>
              <li style="display:inline-block;" id="viewResponseHeaders">
                <a class="btn btn-borderless" onclick="toggleResponseContent(this)" id="response-header-link">Response Headers</a>
              </li>
              <li style="display:inline-block;" id="viewRequest">
                <a class="btn btn-borderless" onclick="toggleResponseContent(this)" id="request-header-link">Request Params</a>
              </li>
            </ul>

          </div>
          <div>
            <textarea class="form-control" style="min-height:180px; overflow:scroll; height:<%= @resultsHeight %>" id="resultsBody"><%= h @return_body %>
            </textarea>
            <textarea class="form-control" style="min-height:180px; overflow:scroll; display:none; font-size:15px; height:<%= @resultsHeight %>" id="results-req-head"><%= @return_status_code.to_s %>
            </textarea>
            <textarea class="form-control" style="min-height:180px; overflow:scroll; display:none; font-size:15px; height:<%= @resultsHeight %>" id="results-resp-head"><%= @request_options.to_s.force_encoding('utf-8') %>
            </textarea>
          </div>
        </div>
      </div>



      <!-- MODALS -->
      <div id="backdrop" style="display:none" onclick="modalHideAll()">

        <!-- SETTINGS MODAL-->
        <div id="load-dialog-modal" class="centered" tabindex="-1" role="dialog" onclick="returnFalse(event)" style="display:none;">
          <div class="modal-content" style="padding-left:15px; padding-right:15px; height:100%">
            <h4 style="text-align:center"><strong>Configuration</strong></h4>
            <hr>
            <div style="display:inline-block;width:100%; margin-bottom:15px">
              <div>
                <label class="form-label conf-label" for="followlocation">Follow Redirects</label>
                <input type="checkbox" name="followlocation" id="followlocation" class="checkbox" style="float:right"
                <% if @follow %>checked<% end %>>
              </div>
              <div>
                <label class="form-label conf-label" for="verbose">Verbose Response</label>
                <input type="checkbox" name="verbose" id="verbose" class="checkbox" style="float:right"
                <% if @verbose %>checked<% end %>>
              </div>
              <div>
                <label class="form-label conf-label" for="ssl_verifypeer">Verify SSL Peers</label>
                <input type="checkbox" name="ssl_verifypeer" id="ssl_verifypeer" class="checkbox" style="float:right"
                <% if @ssl %>checked<% end %>>
              </div>
              <div>
                <label class="form-label conf-label" for="logging">Log Requests</label>
                <input type="checkbox" name="logging" id="logging" class="checkbox" style="float:right"
                <% if @log_requests %>checked<% end %>>
              </div>
              <div>
                <label class="form-label conf-label" for="timeoutInterval">Timeout Interval (seconds)</label>
                <input type="number" min="0" max="3600" name="timeoutInterval" id="timeoutInterval" value="<%= @timeout_interval %>" style="float:right; width:50px; text-align:right; box-shadow:none;">
              </div>
            </div>
          </div>
        </div>


        <!-- FILE UPLOAD MODAL -->
        <div id="file-upload-modal" class="centered" tabindex="-1" role="dialog" style="display:none; z-index:11" onclick="returnFalse(event)">
          <div class="modal-content" style="padding-left:15px; padding-right:15px;">
            <h4 style="text-align:center"><strong>Attach File to Request</strong></h4>
            <hr>
            <div class="modal-body">
              <form id="upload_form" method="post" action="/upload" enctype="multipart/form-data">
                <input type="file" id="datafile" name="datafile">
                <div style="margin-top:25px; margin-bottom:5px; text-align:center">
                  <input type="submit" id="upload_submit" class="btn btn-block btn-simple" style="width:140px; margin-left:auto; margin-right:auto;" value="Upload">
                  <div id="clearFileUpload" class="btn btn-block btn-simple" style="width:140px; margin-left:auto; margin-right:auto;" onclick="clearFileUpload()">Clear</div>
                </div>
              </form>
            </div>
          </div>
        </div>


        <!-- SAVE REQUEST MODAL -->
        <div id="save-modal" class="centered" tabindex="-1" role="dialog" style="display:none; z-index:11" onclick="returnFalse(event)">
          <div class="modal-content" style="padding-left:15px; padding-right:15px;">
            <h4 style="text-align:center"><strong>Save Request</strong></h4>
            <hr>
            <div class="modal-body">
              <div>
                <label class="conf-label" for="collection_name">Collections</label>
                <input style="inline-block" class="form-control" type="text" id="collection_name" name="collection_name" placeholder=" Default">
              </div>
              <div style="margin-top:10px">
                <label class="conf-label" for="test_name">Name</label>
                <input class="form-control" type="text" id="test_name" name="test_name">
              </div>
              <div style="margin-top:25px; margin-bottom:5px; text-align:center">
                <div id="save_submit" class="btn btn-block btn-simple" style="width:140px; margin-left:auto; margin-right:auto;" onclick="save()">Save</div>
              </div>
            </div>
          </div>
        </div>


        <!-- LOAD REQUEST MODAL -->
        <div id="load-modal" class="centered" tabindex="-1" role="dialog" style="display:none; z-index:11" onclick="returnFalse(event)">
          <div class="modal-content" style="padding-left:15px; padding-right:15px;">
            <h4 style="text-align:center"><strong>Load Request</strong></h4>
            <hr>
            <div class="modal-body">
              <div id="reqdata"></div>
            </div>
          </div>
        </div>


        <!-- VARIABLES MODAL -->
        <div id="variables-modal" class="centered" tabindex="-1" role="dialog" style="display:none; z-index:11" onclick="returnFalse(event)">
          <div class="modal-content" style="padding-left:15px; padding-right:15px; ">
            <h4 style="text-align:center"><strong>Variables</strong></h4>
            <hr>
            <div class="modal-body" style="margin-top:10px;">
              Will swap any instances of: <br/>
              <div style="width:100%; text-align:center; margin-top:10px; margin-bottom:10px;">
                <b>{{Key}}</b> for <b>Value</b>
              </div>
              Within headers, payload or URL
            </div>
            <div style="margin-top:20px;">
              <input class="form-control var-input" type="text" value="<%=h(params[:varKey])%>" name="varKey" id="varKey" placeholder=" Key" />
              <input class="form-control var-input" type="text" value="<%=h(params[:varValue])%>" name="varValue" id="varValue" placeholder=" Value" style="float:right" />
            </div>
            <div style="margin-top:25px; margin-bottom:5px; text-align:center">
              <div id="clearVariables" class="btn btn-block btn-simple" style="width:140px; margin-left:auto; margin-right:auto;" onclick="clearVariables()">Clear</div>
            </div>
          </div>
        </div>
      </div>
      <!-- TODO: REMOVE -->
      <input type="hidden" id="payloadHeight" name="payloadHeight" value="100">
      <input type="hidden" id="responseHeight" name="responseHeight" value="180">

  </div>

  <script type="text/javascript">

  /* Common variables */
  var clickCount = document.getElementById('headerfieldsAll').children.length - 1;


  /* Construct Simple Request Object */
  function assembleRequestPayload() {
    var body      = {};
    body.headers  = {};

    /* URL */
    body.request  = document.getElementById('requestType').value;
    body.url      = document.getElementById('url').value;
    body.quantity = document.getElementById('times').value;

    /* HEADERS */
    for (j=0; j<=clickCount; j++) {
      if (document.getElementById('key' + j)) {
        if (document.getElementById('key' + j).value != '') {
          body.headers[document.getElementById('key' + j).value] = document.getElementById('value' + j).value;
        }
      }
    }
    /* PAYLOAD */
    body.payload  = document.getElementById('payload').value;

    return body;
  }

  /* Construct Request object with all parameters*/
  function assembleFullPayload() {
    var body      = assembleRequestPayload();

    /* AUTH */
    body.user     = document.getElementById('usr').value;
    body.password = document.getElementById('pwd').value;

    /* VARIABLES */
    body.var_key  = document.getElementById('varKey').value;
    body.var_val  = document.getElementById('varValue').value;

    /* SETTINGS */
    body.redirect = document.getElementById('followlocation').checked;
    body.verbose  = document.getElementById('verbose').checked;
    body.ssl_ver  = document.getElementById('ssl_verifypeer').checked;
    body.logging  = document.getElementById('logging').checked;
    body.timeout  = document.getElementById('timeoutInterval').value;

    /* FILE UPLOAD */
    body.file     = document.getElementById('datafile').value;

    /* VISIBILITY */
    body.show_url     = document.getElementById('path').style.display;
    body.show_auth    = document.getElementById('auth').style.display;
    body.show_head    = document.getElementById('headers').style.display;
    body.show_payload = document.getElementById('data').style.display;
    body.show_results = document.getElementById('results').style.display;

    return body;
  }

  // TODO
  /* Upload file for request */
  function uploadFile() {
    var vFD = new FormData(document.getElementById('datavalue'));

    var client = new XMLHttpRequest();
    client.open('POST', 'upload');
    client.send(vFD);
  }

  /* Prepare and then send the request */
  function sendRequest() {
    var url     = '/request';
    var payload = assembleFullPayload();

    /* Replace variable keys with their specified values */
    if (payload.var_key && payload.var_val){
      payload.url     = payload.url.replace('{{' + payload.var_key + '}}', payload.var_val);
      payload.payload = payload.payload.replace('{{' + payload.var_key + '}}', payload.var_val);

      /* Replace values in header */
      var keys = Object.keys(payload.headers);
      for(n=0; n<keys.length; n++) {
        console.log(payload.headers[keys[n]]);
        payload.headers[keys[n]] = payload.headers[keys[n]].replace('{{' + payload.var_key + '}}', payload.var_val);
      }

      /* Replace keys in header */
      for(m=0; m<keys.length; m++) {
        if (keys[m].indexOf('{{' + payload.var_key + '}}') != -1){
          payload.headers[keys[m].replace('{{' + payload.var_key + '}}', payload.var_val)] = payload.headers[keys[m]];
          delete payload.headers[keys[m]];
        }
      }
    }

    /* Send Request */
    var data    = JSON.stringify(payload);
    var client  = new XMLHttpRequest();
    client.open('POST', url, false);
    client.setRequestHeader('Content-Type', 'application/json');
    client.send(data);

    if (client.status == 200) {
      var response = JSON.parse(client.responseText);
      console.log(response)
      document.getElementById('requestTime').innerHTML = response.return_time + ' seconds';
      document.getElementById('returnCode').innerHTML = response.return_code + ' ' + response.return_msg;
      document.getElementById('resultsBody').innerHTML = response.return_body;
      document.getElementById('results-req-head').innerHTML = response.return_headers;
      document.getElementById('results-resp-head').innerHTML = response.request_options;
    } else {
      console.log("Unknown Error: POST " + url + " failed.");
    }
  }


  /* Save request in view to a file */
  function save() {
    var url             = '/save';
    var payload         = assembleRequestPayload();
    payload.collection  = document.getElementById('collection_name').value || "Default";
    payload.name        = document.getElementById('test_name').value;
    var data            = JSON.stringify(payload);
    var client          = new XMLHttpRequest();

    client.open('POST', url, false);
    client.setRequestHeader('Content-Type', 'application/json');
    client.send(data);

    if (client.status == 200) {
      modalHideAll();
    } else {
      console.log("Unknown Error: POST " + url + " failed.");
    }
  }


  /* Retrives a list of saved request names per collection */
  function savedRequestList() {
    var url     = '/savedrequests';
    var client  = new XMLHttpRequest();

    client.open('GET', url, false);
    client.send();

    /* Clear and then populate modal with response */
    modalToggle('load-modal');
    var data_container = document.getElementById('reqdata');
    data_container.innerHTML = '';

    if (client.status == 200) {
      var response  = JSON.parse(client.responseText);
      var keys      = Object.keys(response);

      /* Iterate through collections and saved requests per collection */
      for(i=0; i < keys.length; i++) {

        var collection        = document.createElement('div');
        collection.className  = 'collection-header';
        collection_name       = '<span id="collection_name>">' + keys[i] + '</span>';
        collection.innerHTML  = collection_name + '<span aria-hidden="true" onclick="deleteCollection(this)" class="rm-collection">&times;</span><span class="sr-only">Close</span>';

        for(j=0; j < response[keys[i]].length; j++) {
          var req_container   = document.createElement('div');
          var req_list        = document.createElement('div');
          req_container.innerHTML = '<span aria-hidden="true" onclick="deleteRequest(this)" class="rm-collection">&times;</span><span class="sr-only">Close</span>';
          req_list.id         = keys[i] + '-' + response[keys[i]][j];
          req_list.className  = 'collection-data';
          req_list.innerHTML  = response[keys[i]][j];
          req_list.setAttribute('onclick', 'loadRequest(this)');

          req_container.appendChild(req_list);
          collection.appendChild(req_container);
        }
        data_container.appendChild(collection);
      }
    } else {
      data_container.innerHTML('Unknown Error: GET ' + url + ' failed');
    }
  }


  /* Retrieves all data from one request and loads into current view */
  function loadRequest(element){

    var request = element.id.split('-');
    var url     = '/savedrequests/' + request[0] + '/' + request[1];
    var client  = new XMLHttpRequest();

    client.open('GET', url, false);
    client.send();

    if (client.status == 200) {
      modalToggle('load-modal');
      populateView(JSON.parse(client.responseText));
    } else {
      console.log('Unknown Error: GET ' + url + ' failed');
    }
  }


  /* Populate fields with data */
  function populateView(fielddata){
    if (fielddata.url) {
      document.getElementById('url').value = fielddata.url;
    }
    if (fielddata.request) {
      document.getElementById('requestType').value = fielddata.request;
    }
    if (fielddata.quantity) {
      document.getElementById('times').value = fielddata.quantity;
    }
    if (fielddata.payload) {
      document.getElementById('payload').value = fielddata.payload;
    }
    if (fielddata.user) {
      document.getElementById('usr').value = fielddata.user;
    }
    if (fielddata.password) {
      document.getElementById('pwd').value = fielddata.password;
    }
    if (fielddata.var_key) {
      document.getElementById('varKey').value = fielddata.var_key;
    }
    if (fielddata.var_val) {
      document.getElementById('varVal').value = fielddata.var_val;
    }
    if (fielddata.timeout) {
      document.getElementById('timeoutInterval').value = fielddata.timeout;
    }
    if (fielddata.redirect) {
      document.getElementById('followlocation').value = fielddata.redirect;
    }
    if (fielddata.verbose) {
      document.getElementById('verbose').value = fielddata.verbose;
    }
    if (fielddata.ssl_ver) {
      document.getElementById('ssl_verifypeer').value = fielddata.ssl_ver;
    }
    if (fielddata.logging) {
      document.getElementById('logging').value = fielddata.logging;
    }

    if (fielddata.headers) {
      var header_keys   = Object.keys(fielddata['headers']);
      var header_fields = document.getElementById('headerfieldsAll').children.length -1;
      var extra_headers = header_keys.length - header_fields;

      console.log(extra_headers)

      if (extra_headers > 0) {
        for (m=0; m < extra_headers-1; m++) {
          addNewHeader();
        }
      } else if (extra_headers <= 0) {
        for (m=0; m < Math.abs(extra_headers)+1; m++) {
          removeLastHeader();
        }
      }

      indexes = getHeaderIndexes();
      console.log(indexes);

      for(n=0; n<indexes.length; n++) {
         document.getElementById('key' + indexes[n]).value   = header_keys[n];
         document.getElementById('value' + indexes[n]).value = fielddata['headers'][header_keys[n]];
      }
    }

    if (fielddata.show_url == 'none') {
      toggleRequestVisibility();
    }
    if (fielddata.show_auth == 'none') {
      toggleAuthVisibility();
    }
    if (fielddata.show_head == 'none') {
      toggleHeaderVisibility();
    }
    if (fielddata.show_payload == 'none') {
      toggleDataVisibility();
    }
    if (fielddata.show_results == 'none') {
      toggleResultsVisibility();
    }
  }


  /* delete a collection of requests */
  function deleteCollection(button_id){
    var collection_name = button_id.parentNode.firstChild.innerHTML;
    var url     = '/collections/' + collection_name;
    var client  = new XMLHttpRequest();

    client.open('DELETE', url, false);
    client.send();

    if (client.status == 200) {
      modalHideAll();
    } else {
      console.log('Unknown Error: DELETE ' + collection_name + ' failed');
    }
  }


  /* delete request from collection */
  function deleteRequest(button_id){
    var request_name = button_id.parentNode.getElementsByTagName('div')[0].innerHTML;
    var collection_name = button_id.parentNode.parentNode.firstChild.innerHTML;

    var url     = '/collections/' + collection_name + '/' + request_name;
    var client  = new XMLHttpRequest();

    client.open('DELETE', url, false);
    client.send();

    if (client.status == 200) {
      modalHideAll();
    } else {
      console.log('Unknown Error: DELETE ' + collection_name + '/' + request_name + ' failed');
    }
  }


  /* Toggle Modal display */
  function modalToggle(modal_id) {
    document.getElementById('dropdown').style.display = 'none';
    bgrnd = document.getElementById('backdrop');
    modal = document.getElementById(modal_id);
    bgrnd.style.display = (bgrnd.style.display == '') ? 'none' : '';
    modal.style.display = (modal.style.display == '') ? 'none' : '';
  }

  function modalHideAll() {
    document.getElementById('dropdown').style.display           = '';
    document.getElementById('backdrop').style.display           = 'none';
    document.getElementById('load-dialog-modal').style.display  = 'none';
    document.getElementById('save-modal').style.display         = 'none';
    document.getElementById('load-modal').style.display         = 'none';
    document.getElementById('file-upload-modal').style.display  = 'none';
    document.getElementById('variables-modal').style.display    = 'none';
  }

  /* Change page layout to reflect minimizing/maximising divs */
  function toggleRequestVisibility(){
    var path_box   = document.getElementById('path');
    var req_header = document.getElementById('headingReq');

    path_box.style.display = (path_box.style.display != 'none' ? 'none' : '');
    req_header.innerHTML   = (path_box.style.display != 'none' ? '[&ndash;] Request' : '[+] Request');
    req_header.className   = (path_box.style.display != 'none' ? 'shown-box' : 'hidden-box');
  }

  function toggleAuthVisibility(){
    var auth_box    = document.getElementById('auth');
    var auth_header = document.getElementById('headingAuth');

    auth_box.style.display  = (auth_box.style.display != 'none' ? 'none' : '');
    auth_header.innerHTML   = (auth_box.style.display != 'none' ? '[&ndash;] Authentication' : '[+] Authentication');
    auth_header.className   = (auth_box.style.display != 'none' ? 'shown-box' : 'hidden-box');
  }

  function toggleHeaderVisibility(){
    var headers_box = document.getElementById('headers');
    var head_header = document.getElementById('headingHead');

    headers_box.style.display = (headers_box.style.display != 'none' ? 'none' : '');
    head_header.innerHTML     = (headers_box.style.display != 'none' ? '[&ndash;] Headers' : '[+] Headers');
    head_header.className     = (headers_box.style.display != 'none' ? 'shown-box' : 'hidden-box');
  }

  function toggleDataVisibility(){
    var data_box    = document.getElementById('data');
    var data_header = document.getElementById('headingData');

    data_box.style.display  = (data_box.style.display != 'none' ? 'none' : '');
    data_header.innerHTML   = (data_box.style.display != 'none' ? '[&ndash;] Payload' : '[+] Payload');
    data_header.className   = (data_box.style.display != 'none' ? 'shown-box' : 'hidden-box');
  }

  function toggleResultsVisibility() {
    var results_box     = document.getElementById('results');
    var results_header  = document.getElementById('headingResults');

    results_box.style.display = (results_box.style.display != 'none' ? 'none' : '');
    results_header.innerHTML  = (results_box.style.display != 'none' ? '[&ndash;] Results' : '[+] Results');
    results_header.className  = (results_box.style.display != 'none' ? 'shown-box' : 'hidden-box');
  }


  /* Header functions */
  /* Append header to bottom */
  function addNewHeader() {
    clickCount += 1;

    var input_container = document.createElement('div');
    var header_key      = document.createElement('input');
    var header_val      = document.createElement('input');
    var close_btn       = document.createElement('button');

    input_container.type    = 'div';
    input_container.style   = 'margin-bottom:2px;';
    input_container.id      = 'headerfields' + clickCount;

    header_key.type         = 'text';
    header_key.name         = 'key' + clickCount;
    header_key.id           = 'key' + clickCount;
    header_key.className    = 'key form-control head-input';
    header_key.placeholder  = ' Name';
    header_key.autocomplete = 'off';
    header_key.value        = '<%=h(params[:key])%>';
    header_key.value        = header_key.value.replace('key', 'key' + clickCount);

    /* Not sure why this is necessary. But it is */
    header_key.style        = 'margin-right:9px';

    header_val.type         = 'text';
    header_val.name         = 'value' + clickCount;
    header_val.id           = 'value' + clickCount;
    header_val.className    = 'value form-control head-input';
    header_val.placeholder  = ' Value';
    header_val.autocomplete = 'off';
    header_val.value        = '<%=h(params[:value])%>';
    header_val.value        = header_val.value.replace('value', 'value' + clickCount);

    close_btn.type      = 'button';
    close_btn.id        = 'close' + clickCount;
    close_btn.className = 'close';
    close_btn.tabIndex  = '-1';
    close_btn.innerHTML = '<span style="line-height:inherit" aria-hidden="true">&times;</span><span class="sr-only">Close</span>';
    close_btn.setAttribute('onclick', 'removeRow(this)');

    document.getElementById('headerfieldsAll').appendChild(input_container);
    input_container.appendChild(header_key);
    input_container.appendChild(header_val);
    input_container.appendChild(close_btn);
    document.getElementById(header_key.id).focus();
  }

  /* Remove a header row from the bottom */
  function removeLastHeader() {
    var rows      = document.getElementById('headerfieldsAll').children.length - 1;
    var last_row  = document.getElementById('headerfieldsAll').children[rows];
    last_row.parentNode.removeChild(last_row);
  }

  function getHeaderIndexes(){
    var rows    = document.getElementById('headerfieldsAll').children;
    var indexes = [];
    for(i=0; i<rows.length; i++) {
      indexes.push(rows[i].id.match(/\d+/));
    }
    return indexes;
  }


  /* Clear field functions */
  function clearURL(){
    document.getElementById('url').value = '';
    document.getElementById('times').options.selectedIndex        = 0;
    document.getElementById('requestType').options.selectedIndex  = 0;
  }

  function clearAuthCredentials() {
    document.getElementById('usr').value = '';
    document.getElementById('pwd').value = '';
  }

  function removeRow(rowNumber) {
    rNum = rowNumber.id.charAt(rowNumber.id.length -1);
    document.getElementById('headerfieldsAll').removeChild(document.getElementById('headerfields' + rNum));
  }

  function clearFileUpload() {
    var oldInput        = document.getElementById('datafile');
    var newInput        = document.createElement('input');
    newInput.id         = oldInput.id;
    newInput.type       = oldInput.type;
    newInput.name       = oldInput.name;
    newInput.className  = oldInput.className;
    oldInput.parentNode.replaceChild(newInput, oldInput);
  }

  function clearVariables() {
    document.getElementById('varKey').value   = '';
    document.getElementById('varValue').value = '';
  }

  /*clear all form fields. Delete additional header fields*/
  function clearAllFields() {
    document.getElementById('requestType').value    = 'GET';
    document.getElementById('times').value          = '1';
    document.getElementById('url').value            = '';
    document.getElementById('usr').value            = '';
    document.getElementById('pwd').value            = '';
    document.getElementById('payload').value        = '';
    document.getElementById('varKey').value         = '';
    document.getElementById('varValue').value       = '';
    document.getElementById('payload').style.height = '100px';

    if (document.getElementById('resultsBody')) {
      document.getElementById('resultsBody').value         = '';
      document.getElementById('resultsBody').style.height  = '180px';
    }
    if (document.getElementById('results-req-head')) {
      document.getElementById('results-req-head').value         = '';
      document.getElementById('results-req-head').style.height  = '180px';
    }
    if (document.getElementById('results-resp-head')) {
      document.getElementById('results-resp-head').value         = '';
      document.getElementById('results-resp-head').style.height  = '180px';
    }
    while (headerfieldsAll.firstChild) {
      headerfieldsAll.removeChild(headerfieldsAll.firstChild);
    }
  }


  /* Page View functions */
  function toggleResponseContent(new_selection){
    /* Clear current filters */
    document.getElementById('response-data-link').style.color   = '#000';
    document.getElementById('resultsBody').style.display        = 'none';
    document.getElementById('response-header-link').style.color = '#000';
    document.getElementById('results-req-head').style.display   = 'none';
    document.getElementById('request-header-link').style.color  = '#000';
    document.getElementById('results-resp-head').style.display  = 'none';

    /* Apply new filter */
    new_selection.style.color = '#337ab7';

    if (new_selection.id == 'response-data-link') {
      document.getElementById('resultsBody').style.display        = '';
    } else if (new_selection.id == 'response-header-link') {
      document.getElementById('results-req-head').style.display   = '';
    } else if (new_selection.id == 'request-header-link') {
      document.getElementById('results-resp-head').style.display  = '';
    }
  }

  function setHeight() {
    var payloadHeight = document.getElementById('payload').style.height;
    document.getElementById('payloadHeight').value = payloadHeight;
    if (document.getElementById('resultsBody').style.display != 'none'){
      var resHeight = document.getElementById('resultsBody').style.height;
    }
    if (document.getElementById('results-req-head').style.display != 'none') {
      var resHeight = document.getElementById('results-req-head').style.height;
    }
    if (document.getElementById('results-resp-head').style.display != 'none') {
      var resHeight = document.getElementById('results-req-head').style.height;
    }
    document.getElementById('responseHeight').value = resHeight;
  }


  /* Shut down server and then reload page */
  function quit(){
    var url = '/quit';
    var client = new XMLHttpRequest();
    client.open('GET', url, false);

    try {
      client.send();
    } catch (e) {
      console.log('Catching expected exception. Reloading page now');
    } finally {
      window.location.reload();
    }
  }


  /* Warnings */
  function warn() {
    // Clear Previous text
    document.getElementById('warning-text').style.display = 'none';
    document.getElementById('warning-text').setAttribute('tooltip', '');
    var current_warning = '';
    var warning_count   = 0;

    // GET request with body
    if (document.getElementById('payload').value != '' && document.getElementById('requestType').value == 'GET') {
      warning_count += 1;
      document.getElementById('warning-text').style.display = '';
      document.getElementById('warning-text').setAttribute('tooltip', 'GET request should not contain a payload');
      current_warning = document.getElementById('warning-text').getAttribute('tooltip');
    }

    // Empty header key OR value
    var indexes = getHeaderIndexes();
    var header_warning = false;
    indexes.forEach(function(index) {
      var key_id = document.getElementById('key' + index);
      var val_id = document.getElementById('value' + index);
      if ((key_id.value == '' || val_id.value == '') && (key_id.value != val_id.value)) {
        header_warning = true;
      }
    });
    if (header_warning) {
      warning_count += 1;
      document.getElementById('warning-text').style.display = '';
      document.getElementById('warning-text').setAttribute('tooltip', current_warning + '\nHeaders must contain a key and value');
      current_warning = document.getElementById('warning-text').getAttribute('tooltip');
    }
    document.getElementById('warning-text').innerHTML = '[ ' + warning_count + ' ]';
  }


  /* Event listeners */

  /* Don't allow form to submit */
  document.getElementById('upload_form').onsubmit = function(event) {
    event.preventDefault();

    /*var url     = '/upload';
    var data    = serialize(document.getElementById('upload_form'))
    var client  = new XMLHttpRequest();

    client.open('POST', url, false);

    client.send(data);*/
    alert(serialize(document.forms[0]).length);

    //alert(serialize(document.getElementById('upload_form')));
  }

  /* Save page state on refresh */
  window.onkeyup = function() {
    var fielddata = assembleFullPayload()
    localStorage.fielddata = JSON.stringify(fielddata);
    warn();
  }
  window.onclick = function() {
    var fielddata = assembleFullPayload()
    localStorage.fielddata = JSON.stringify(fielddata);
    warn();
  }
  window.onchange = function() {
    var fielddata = assembleFullPayload()
    localStorage.fielddata = JSON.stringify(fielddata);
    warn();
  }

  /* Reload saved page stat on refresh */
  window.onload = function() {
    populateView(JSON.parse(localStorage.fielddata));
    warn();
  }


  /* Block some JS and Form behaviour from occuring */
  function returnFalse(event) {
    event.cancelBubble=true;
    if(event.stopPropagation) {
      event.stopPropagation();
    }
    return false;
  }

  </script>
</body>
</html>
